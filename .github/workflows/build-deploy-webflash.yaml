## Sample workflow for building and deploying a Jekyll site to GitHub Pages
#name: Build firmware and deploy GitHub Page
#
#on:
#  # Runs on pushes targeting the default branch
#  push:
#    branches: ["main"]
#    paths-ignore:
#      - '**.md'
#
#  # Allows you to run this workflow manually from the Actions tab
#  workflow_dispatch:
#
## Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
#permissions:
#  contents: read
#  pages: write
#  id-token: write
#
## Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
## However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
#concurrency:
#  group: "pages"
#  cancel-in-progress: false
#
#jobs:
#  # Build job
#  build:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      # Install the Arduino CLI
#      - name: Install Arduino CLI
#        uses: arduino/setup-arduino-cli@v1
#
#      # Build CYD Arduino Code
#      - uses: arduino/compile-sketches@v1
#        name: Compile CYD code
#        with:
#          fqbn: "esp32:esp32:esp32"
#          platforms: |
#            - name: esp32:esp32
#              source-url: https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json
#          # No need to specify ESP-libraries as these are installed with the platform (on the line above).
#          # Downloading SpeedyStepper from source to get correct casing on import of Arduino.h (spelled arduino.h in the version from Arduino Library Manager)
#          libraries: |
#            - name: ImageFetcher
#              source-url: https://github.com/witnessmenow/file-fetcher-arduino.git
#            - name: WiFiManager
#            - name: ESP_DoubleResetDetector
#            - name: ArduinoJson
#            - name: ezTime
#            - name: UniversalTelegramBot
#            - name: PNGdec
#          sketch-paths: |
#            - F1-Notifications
#          enable-warnings-report: true
#          verbose: false
#          cli-compile-flags: |
#            - --export-binaries
#
#      # Copy binaries to GitHubPages folder for publishing
#      - name: Copy compiled binaries to CYD
#        run: |
#          # mkdir GitHubPages/ESPWebTools/esp32Firmware
#          mkdir GitHubPages/ESPWebTools/cyd
#
#          # Copy the manifest file for the CYD
#          cp GitHubPages/ESPWebTools/manifest.json GitHubPages/ESPWebTools/cyd
#
#          # Copy compiled binaries that were exported by the `-e` flag in the arduino/compile-sketches task
#          # Maintain folder structure, for cases where we are compiling for multiple board versions
#          # If we were sure that we would never need to compile for anything other then esp32:esp32:esp32, we could have used this command instead: cp -r OpenMacroRail_Arduino/build/esp32.esp32.esp32/*.bin GitHubPages/ESPWebTools/esp32Firmware
#          cd F1-Notifications/build
#          find . -print | grep -i .bin$ | xargs -i cp --parent {} ../../GitHubPages/ESPWebTools/cyd
#          cd ../..
#
#          # Copy boot_app0.bin to the esp32Firmware folder. This file will be common for all esp32 boards (i think)
#          # Using a version agnostic search to find the file. grep -m 1 makes sure only one file is copied in case multiple versions are installed.
#          find /home/runner/.arduino15/packages/esp32/hardware/esp32/ -type f | grep -i -m 1 boot_app0.bin$ | xargs -i cp {} GitHubPages/ESPWebTools/cyd
#
#      # Build Matrix Arduino Code
#      - uses: arduino/compile-sketches@v1
#        name: Compile Matrix code
#        with:
#          fqbn: "esp32:esp32:esp32"
#          platforms: |
#            - name: esp32:esp32
#              source-url: https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json
#          # No need to specify ESP-libraries as these are installed with the platform (on the line above).
#          # Downloading SpeedyStepper from source to get correct casing on import of Arduino.h (spelled arduino.h in the version from Arduino Library Manager)
#          libraries: |
#            - name: ImageFetcher
#              source-url: https://github.com/witnessmenow/file-fetcher-arduino.git
#            - name: ESP32 HUB75 LED MATRIX PANEL DMA Display
#              source-url: https://github.com/witnessmenow/ESP32-HUB75-MatrixPanel-I2S-DMA.git
#            - name: Adafruit GFX Library
#          sketch-paths: |
#            - F1-Notifications
#          enable-warnings-report: true
#          verbose: false
#          cli-compile-flags: |
#            - --build-property
#            - compiler.cpp.extra_flags=-DMATRIX_DISPLAY
#            - --export-binaries
#
#      # Copy binaries to GitHubPages folder for publishing
#      - name: Copy compiled binaries to Matrix
#        run: |
#          # Make matrix directory
#          mkdir GitHubPages/ESPWebTools/matrix
#
#          # Copy the manifest file for the matrix
#          cp GitHubPages/ESPWebTools/manifest.json GitHubPages/ESPWebTools/matrix
#
#          cd F1-Notifications/build
#          find . -print | grep -i .bin$ | xargs -i cp --parent {} ../../GitHubPages/ESPWebTools/matrix
#          cd ../..
#
#          # Copy boot_app0.bin to the esp32Firmware folder. This file will be common for all esp32 boards (i think)
#          # Using a version agnostic search to find the file. grep -m 1 makes sure only one file is copied in case multiple versions are installed.
#          find /home/runner/.arduino15/packages/esp32/hardware/esp32/ -type f | grep -i -m 1 boot_app0.bin$ | xargs -i cp {} GitHubPages/ESPWebTools/matrix
#
#      # Build GitHub Page
#      - name: Setup Github Page
#        uses: actions/configure-pages@v3
#
#      - name: Build GitHub Page with Jekyll
#        uses: actions/jekyll-build-pages@v1
#        with:
#          source: ./GitHubPages
#          destination: ./_site
#
#      - name: Upload GitHub Page Artifact
#        uses: actions/upload-pages-artifact@v1
#
#  # Deployment job
#  deploy:
#    environment:
#      name: github-pages
#      url: ${{ steps.deployment.outputs.page_url }}
#    runs-on: ubuntu-latest
#    needs: build
#    steps:
#      - name: Deploy to GitHub Pages
#        id: deployment
#        uses: actions/deploy-pages@v2
